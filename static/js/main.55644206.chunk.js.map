{"version":3,"sources":["App.js","Screens/Login.js","Screens/Register.js","serviceWorker.js","index.js","web3.js","crpytoid.js","Screens/Home.js","ipfs.js"],"names":["App","className","style","textDecoration","color","to","Button","fontSize","padding","variant","Login","useState","instituteName","setInstituteName","instituteAddress","setInstituteAddress","useEffect","window","web3","Web3","currentProvider","ethereum","enable","alert","onSubmit","e","marginRight","TextField","value","onChange","target","label","pathname","Register","history","useHistory","onFormSubmit","a","eth","getAccounts","accounts","console","log","cryptoid","methods","registerInstitute","send","from","error","transactionHash","push","onClick","type","Boolean","location","hostname","match","ReactDOM","render","StrictMode","exact","path","component","Home","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","Contract","props","setValues","instituteGetAddress","setInstituteGetAddress","studentEnroll","setStudentEnroll","studentGetEnroll","setStudentGetEnroll","openDialog","setOpenDialog","openGetDialog","setOpenGetDialog","buffer","setBuffer","setIpfsHash","setEthAddress","setTransactionHash","getIPFSHash","setgetIpfsHash","convertToBuffer","reader","Buffer","result","event","preventDefault","ethAddress","options","address","ipfs","add","err","ipfsHash","hash","ipHash","newIdentityCard","onGetButtonClick","getIdentityCard","call","temp","open","onClose","autoFocus","margin","id","fullWidth","stopPropagation","file","files","FileReader","readAsArrayBuffer","onloadend","width","height","wordWrap","alignItems","href","IPFS","host","port","protocol"],"mappings":"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","file":"static/js/main.55644206.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {Link} from \"react-router-dom\"\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n        <div className=\"app__container\">\r\n          <h1>CRYPTO ID</h1>\r\n          <div className=\"app__button\">\r\n            <Link style={{ textDecoration: 'none',color:\"black\" }} to=\"/login\">\r\n            <Button \r\n            style={{\r\n              fontSize:\"16px\",\r\n              padding:\"5px 40px\"\r\n            }}\r\n            variant=\"contained\" \r\n            color=\"primary\">\r\n              Login\r\n            </Button>\r\n            </Link>\r\n           \r\n            <Link style={{ textDecoration: 'none' ,color:\"black\"}} to=\"/register\">\r\n            <Button \r\n            style={{\r\n              fontSize:\"16px\",\r\n              padding:\"5px 20px\"\r\n            }}\r\n            variant=\"outlined\" \r\n            color=\"primary\">\r\n              Register\r\n            </Button>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n          <span style={{fontSize:\"12px\"}}>Designed & Developed By</span>\r\n          <p>Dhruv Nakum & AbdulBasit Hakimi</p>\r\n          <br/>\r\n          <p>Â©All rights reserved 2020</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { useState,useEffect } from 'react'\r\nimport \"./Login.css\"\r\nimport SchoolIcon from '@material-ui/icons/School';\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport {Link} from \"react-router-dom\"\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Web3 from \"web3\"\r\n\r\n\r\n\r\nfunction Login() {\r\n\r\n    const [instituteName,setInstituteName] = useState(\"\")\r\n    const [instituteAddress,setInstituteAddress]= useState(\"\")\r\n\r\n    const ethEnabled = () => {\r\n        if (window.web3) {\r\n          window.web3 = new Web3(window.web3.currentProvider);\r\n          window.ethereum.enable();\r\n          return true;\r\n        }\r\n        return false;\r\n      }\r\n\r\n      useEffect(()=>{\r\n          if(!ethEnabled()){\r\n            alert(\"Please install MetaMask to use this dApp!\");\r\n          }\r\n      \r\n    },[])\r\n\r\n    const onFormSubmit = (e)=>{\r\n        \r\n    }\r\n\r\n    const handleAddressChange = (e)=>{\r\n        setInstituteAddress(e.target.value)\r\n    }\r\n\r\n    const handleNameChange = (e)=>{\r\n        setInstituteName(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <form onSubmit={onFormSubmit} className=\"login__container\">\r\n                <h1>Login</h1>\r\n                <div className=\"login__input\">\r\n                    <div className=\"address\">\r\n                    <BusinessIcon style={{marginRight:\"10px\"}}/>\r\n                    <TextField\r\n                    className=\"textfield\"\r\n                    value={instituteAddress}\r\n                    onChange={handleAddressChange}\r\n                     label=\"Enter Institute Address\" />\r\n                    </div>\r\n                    <div className=\"name\">\r\n                    <SchoolIcon style={{marginRight:\"10px\"}}/>\r\n                    <TextField\r\n                    className=\"textfield\"\r\n                    value={instituteName}\r\n                    onChange={handleNameChange}\r\n                     label=\"Enter Institute Name\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"login__button\">\r\n                <Link style={{ textDecoration: 'none',color:\"black\" }} to={{\r\n                    pathname:\"/home\",\r\n                    instituteName:{instituteName},\r\n                    instituteAddress:{instituteAddress}\r\n                }} >\r\n                     <Button \r\n            style={{\r\n              fontSize:\"16px\",\r\n              padding:\"5px 40px\"\r\n            }}\r\n            variant=\"contained\" \r\n            color=\"primary\">\r\n              Login\r\n            </Button>\r\n                    </Link>\r\n                </div>\r\n            <Link style={{ textDecoration: 'none',color:\"black\" }} to=\"/register\">\r\n                    <p>Doesn't have an account ?</p>\r\n                </Link>\r\n            </form>\r\n              \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useState,useEffect } from 'react'\r\nimport \"./Register.css\"\r\nimport SchoolIcon from '@material-ui/icons/School';\r\nimport {Link} from \"react-router-dom\"\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport web3 from '../web3';\r\nimport Web3 from \"web3\"\r\nimport cryptoid from \"../crpytoid\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Register() {\r\n\r\n    const [instituteName,setInstituteName] = useState(\"\")\r\n    const history = useHistory()\r\n\r\n    const ethEnabled = () => {\r\n        if (window.web3) {\r\n          window.web3 = new Web3(window.web3.currentProvider);\r\n          window.ethereum.enable();\r\n          return true;\r\n        }\r\n        return false;\r\n      }\r\n\r\n      useEffect(()=>{\r\n          if(!ethEnabled()){\r\n            alert(\"Please install MetaMask to use this dApp!\");\r\n          }\r\n        //   else{\r\n        //       alert(\"connected\");\r\n        //   }\r\n    },[])\r\n\r\n    \r\n    const onFormSubmit = async(e)=>{\r\n        const accounts = await web3.eth.getAccounts();\r\n        console.log('Sending from Metamask account: ' + accounts);\r\n       if(instituteName){\r\n       await cryptoid.methods.registerInstitute(instituteName).send({\r\n            from: accounts[0] \r\n        }, (error, transactionHash) => {\r\n            console.log(`Transaction Hash : ${transactionHash}`);\r\n            if(transactionHash){\r\n                alert(\"Registration Completed\")\r\n                history.push(\"/login\")\r\n            }else{\r\n                alert(\"Registration Failed\")\r\n            }\r\n            //setTransactionHash({transactionHash});\r\n        });\r\n        \r\n    }\r\n    else{\r\n        alert(\"Please enter Institute Name\")\r\n    }\r\n    }\r\n\r\n\r\n    const handleNameChange = (e)=>{\r\n        setInstituteName(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"register\">\r\n            <div className=\"register__container\">\r\n                <h1>Register</h1>\r\n                <form onSubmit={onFormSubmit}  className=\"register__input\"> \r\n                    <div className=\"name\">\r\n                    <SchoolIcon style={{marginRight:\"10px\"}}/>\r\n                    <TextField\r\n                    className=\"textfield\"\r\n                    value={instituteName}\r\n                    onChange={handleNameChange}\r\n                     label=\"Enter Institute Name\" />\r\n                    </div>\r\n                </form>\r\n                <div className=\"register__button\">\r\n                <Link style={{ textDecoration: 'none',color:\"black\" }} to={{\r\n                    pathname:\"/login\",\r\n                    instituteName:{instituteName},\r\n                }} >\r\n                    <Button \r\n                    onClick={onFormSubmit}\r\n                        type=\"submit\"\r\n                        style={{\r\n                            fontSize:\"16px\",\r\n                            padding:\"5px 40px\"\r\n                        }}\r\n                        variant=\"contained\" \r\n                        color=\"primary\">\r\n                        Register\r\n                    </Button>\r\n                    </Link>\r\n                </div>\r\n                <Link style={{ textDecoration: 'none',color:\"black\" }} to=\"/login\">\r\n                    <p>Already have an account ?</p>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport Login from \"./Screens/Login\"\r\nimport Register from \"./Screens/Register\"\r\nimport Home from \"./Screens/Home\"\r\nimport {BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n     <Router>\r\n      <div>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={App}/>\r\n            <Route path=\"/login\" component={Login}/>\r\n            <Route path=\"/register\" component={Register}/> \r\n            <Route path=\"/home\" component={Home}/>\r\n        </Switch>  \r\n      </div>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import Web3 from 'web3';\r\n\r\nconst web3 = new Web3(window.web3.currentProvider);\r\nexport default web3;","import web3 from './web3';\r\n\r\nconst address = '0x7FDD9C6207a1723Eb167596568cd80E74c15664E';\r\n\r\nconst abi = \r\n[\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"enrollmentNumber\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"ipfsHash\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"_instituteName\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"newIdentityCard\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"_instituteName\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"registerInstitute\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"constructor\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"enrollmentNumber\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"instituteAddress\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getIdentityCard\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"owner\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t}\r\n]\r\n\r\nexport default new web3.eth.Contract(abi, address);","import React, { useState, useEffect } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./Home.css\"\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport web3 from '../web3';\r\nimport ipfs from '../ipfs';\r\nimport cryptoid from \"../crpytoid\";\r\n\r\nfunction Home(props) {\r\n    \r\n        useEffect(()=>{\r\n            // ethEnabled()\r\n            setValues()\r\n           \r\n        },[]);\r\n\r\n\r\n        // const ethEnabled = () => {\r\n        //     if (window.web3) {\r\n        //       window.web3 = new Web3(window.web3.currentProvider);\r\n        //       window.ethereum.enable();\r\n        //       return true;\r\n        //     }\r\n        //     return false;\r\n        //   }\r\n    \r\n    const history = useHistory();\r\n    const [instituteName,setInstituteName] = useState(\"\")\r\n    const [instituteAddress,setInstituteAddress]= useState(\"\")\r\n    const [instituteGetAddress,setInstituteGetAddress]= useState()\r\n    const [studentEnroll, setStudentEnroll]= useState(\"\")\r\n    const [studentGetEnroll, setStudentGetEnroll]= useState()\r\n    const [openDialog,setOpenDialog] = useState(false);\r\n    const [openGetDialog,setOpenGetDialog] = useState(false);\r\n    const [buffer,setBuffer]= useState(\"\")\r\n    const [IPFSHash,setIpfsHash] = useState(null)\r\n    const [ethAddress,setEthAddress] =useState(\"\")\r\n    const [transactionHash,setTransactionHash] = useState()\r\n    const [getIPFSHash,setgetIpfsHash] = useState(null)\r\n    \r\n\r\n\r\n    const handleAddDialog=()=>{\r\n        setOpenDialog(false);\r\n    }\r\n    \r\n    const setValues = ()=>{\r\n        if (props.location.instituteName) {\r\n            setInstituteName(props.location.instituteName.instituteName)\r\n            setInstituteAddress(props.location.instituteAddress.instituteAddress)\r\n            \r\n        } else {\r\n            history.push('/login')\r\n        }\r\n    }\r\n    const convertToBuffer = async(reader) => {\r\n      //file is converted to a buffer for upload to IPFS\r\n        const buffer = await Buffer.from(reader.result);\r\n      //set this buffer -using es6 syntax\r\n        setBuffer(buffer);\r\n    };\r\n    const captureFile =(event) => {\r\n        event.stopPropagation()\r\n        event.preventDefault()\r\n        const file = event.target.files[0]\r\n        let reader = new window.FileReader()\r\n        reader.readAsArrayBuffer(file)\r\n        reader.onloadend = () => convertToBuffer(reader)    \r\n      };\r\n\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        //bring in user's metamask account address\r\n        \r\n         const accounts = await web3.eth.getAccounts();\r\n        // console.log('Sending from Metamask account: ' + accounts);\r\n        //obtain contract address from storehash.js\r\n        \r\n        const ethAddress= cryptoid.options.address;\r\n        setEthAddress({ethAddress});\r\n        console.log(ethAddress);\r\n\r\n        //hash: \"Qmb4kWJKrTuJBZozrvfdT8Jm2H7cWGXTqvShmBufsf76v4\"\r\n        // path: \"Qmb4kWJKrTuJBZozrvfdT8Jm2H7cWGXTqvShmBufsf76v4\"\r\n        // size: 1780339\r\n        // 0x7FDD9C6207a1723Eb167596568cd80E74c15664E\r\n\r\n        //save document to IPFS,return its hash#, and set hash# to state\r\n        //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \r\n        await ipfs.add(buffer, (err, ipfsHash) => {\r\n          console.log(`Error: ${err}, ipfsHash: ${ipfsHash}`);\r\n        \r\n          //setState by setting ipfsHash to ipfsHash[0].hash \r\n        //cryptoid.methods.newIdentityCard({enrollmentNumber:studentEnroll,ipfsHash:ipfsHash[0].hash,_instituteName:instituteName});\r\n         console.log(ipfsHash)\r\n        \r\n        setIpfsHash(ipfsHash[0].hash);\r\n        const ipHash = ipfsHash[0].hash;\r\n        // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \r\n        //return the transaction hash from the ethereum contract\r\n        //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\r\n        \r\n        console.log(\"Institute Name\"+instituteName);\r\n\r\n        cryptoid.methods.newIdentityCard(studentEnroll,ipHash,instituteName).send({\r\n            from: accounts[0] \r\n        }, (error, transactionHash) => {\r\n            console.log(`Transaction Hash : ${transactionHash}`);\r\n            console.log(`IPFS Hash : ${ipHash}`);\r\n            setTransactionHash({transactionHash});\r\n            setOpenDialog(false)\r\n            alert(\"Student Added Successfully\")\r\n        });\r\n\r\n        //   storehash.methods.sendHash(this.state.ipfsHash).send({\r\n        //     from: accounts[0] \r\n        //   }, (error, transactionHash) => {\r\n        //     console.log(transactionHash);\r\n        //     this.setState({transactionHash});\r\n        //   }); //storehash \r\n        }) //await ipfs.add \r\n      }; //onSubmit\r\n\r\n      const onStudentEnrollSubmit = (e)=>{\r\n          setStudentEnroll(e.target.value);\r\n        //   console.log(studentEnroll)\r\n      }\r\n\r\n      const studentGetEnrollInput = (e)=>{\r\n          setStudentGetEnroll(e.target.value)\r\n      }\r\n\r\n      const instituteGetAddressInput=(e)=>{\r\n          setInstituteGetAddress(e.target.value)\r\n      }\r\n\r\n      const onGetButtonClick=async()=>{\r\n        //   console.log(\"in Get Button Click\");\r\n        // console.log(`${studentGetEnroll} ${instituteGetAddress}`)\r\n       const temp = await cryptoid.methods.getIdentityCard(studentGetEnroll,instituteGetAddress).call() //.then(e=>console.log(e));\r\n       console.log(temp);\r\n       if(temp!=\"\"){\r\n        setgetIpfsHash(temp);\r\n        alert(\"Student verified\");\r\n       }\r\n       else{\r\n           alert(\"Student not verified\");\r\n       }\r\n       //setgetIpfsHash(temp);\r\n        \r\n      }\r\n    \r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <div className=\"home__header\">\r\n                <h1>CRYPTO ID</h1>\r\n            </div>\r\n            {\r\n                !openDialog ? (\r\n                    <form  className=\"home__body\">\r\n                        <div className=\"body__input\">\r\n                            <p>Institute Name</p>\r\n                            <p>{instituteName ?? \"\"}</p>\r\n                        </div>\r\n                \r\n                        <div className=\"body__input\">\r\n                            <p >Institute Address</p>\r\n                            <p>{instituteAddress??\"\"}</p>\r\n                        </div>\r\n                        {/* <div className=\"body__input\">\r\n                            <p>Student Count</p>\r\n                            <center><h3>10</h3></center>\r\n                        </div> */}\r\n                    </form>\r\n                ):\r\n                <Dialog open={openDialog} onClose={()=>setOpenDialog(false)}>\r\n                    <DialogTitle>Student Details</DialogTitle>\r\n                    <DialogContent className=\"dialog__content\">\r\n                        <TextField\r\n                            value={studentEnroll}\r\n                            onChange={onStudentEnrollSubmit}\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            label=\"Student Enrollment Number\"\r\n                            fullWidth\r\n\r\n                        />\r\n                        <h3> Choose file to send to IPFS </h3>\r\n                        <form className=\"addStudentForm\" onSubmit={onSubmit}>\r\n                        <input \r\n                        type = \"file\"\r\n                        onChange = {captureFile}\r\n                        />\r\n                        <button \r\n                        type=\"submit\"> \r\n                        Add\r\n                        </button>\r\n                        </form>\r\n                    </DialogContent>\r\n                </Dialog>\r\n            }\r\n            {\r\n                openGetDialog?(\r\n                    <Dialog open={openGetDialog} onClose={()=>setOpenGetDialog(false)}>\r\n                    <DialogContent className=\"dialog__content\">\r\n                        <TextField\r\n                            value={studentGetEnroll}\r\n                            onChange={studentGetEnrollInput}\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            label=\"Student Enrollment Number\"\r\n                            fullWidth\r\n                        />  \r\n                        <TextField\r\n                            value={instituteGetAddress}\r\n                            onChange={instituteGetAddressInput}\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            label=\"Institute Address\"\r\n                            fullWidth\r\n                        />\r\n                        {getIPFSHash?(\r\n                            // <div>\r\n                            // <h2>Your IPFS Hash is:</h2>\r\n                            // <h3>${getIPFSHash}</h3>\r\n                            // </div>\r\n                            <div style={{width:\"400px\"/*,backgroundColor:\"lightblue\"*/,height:\"100px\",wordWrap:\"break-word\",alignItems:\"center\"}}>\r\n                                <h3>Your IPFS hash is:<br/>{getIPFSHash}</h3>\r\n                                <a href={\"https://gateway.ipfs.io/ipfs/\"+getIPFSHash}>Get your ID</a>\r\n                            </div>\r\n                        ):(\r\n                            <div/>\r\n                            // <div style={{width:\"400px\",backgroundColor:\"red\",height:\"100px\",wordWrap:\"break-word\",alignItems:\"center\"}}>\r\n                            //     <h3>Your IPFS hash is:<br/>${getIPFSHash}</h3>\r\n                            // </div>\r\n                            \r\n                        )};\r\n                            <button onClick={onGetButtonClick}> \r\n                                Get\r\n                            </button>\r\n                    </DialogContent>\r\n                </Dialog>\r\n                ):<div/>   \r\n            }\r\n            <div className=\"home__button\">\r\n                <button onClick={()=>setOpenDialog(true)}>Add New Student ID</button>\r\n                <button onClick={()=>setOpenGetDialog(true)}>Get Student ID</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","//using the infura.io node, otherwise ipfs requires you to run a //daemon on your own computer/server.\r\n\r\n\r\nimport IPFS from \"ipfs-api\"\r\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\r\n//run with local daemon\r\n// const ipfsApi = require('ipfs-api');\r\n// const ipfs = new ipfsApi('localhost', '5001', {protocol:'http'});\r\nexport default ipfs;"],"sourceRoot":""}